// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package sku_reader

import (
	"context"
	"fmt"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"log"
	"net"
	"sku-reader/application"
	"sku-reader/domain"
	"sku-reader/infrastructure/persistence"
	"sku-reader/infrastructure/socket"
)

// Injectors from wire.go:

func initializeMongoDbRepository(ctx context.Context, cfg Config) persistence.MessageMongoRepository {
	client := createMongoDbClient(ctx, cfg)
	collection := initializeMongoDbCollection(client, cfg)
	messageMongoRepository := persistence.NewMongoRepository(client, collection, ctx)
	return messageMongoRepository
}

func initializeCreateMessageCommandHandler(repository domain.MessageRepository) application.CreateMessageCommandHandler {
	createMessageCommandHandler := application.NewCreateMessageCommandHandler(repository)
	return createMessageCommandHandler
}

func initializeGenerateReportQueryHandler(repository domain.MessageRepository) application.GenerateReportQueryHandler {
	generateReportQueryHandler := application.NewGenerateReportQueryHandler(repository)
	return generateReportQueryHandler
}

func InitializeSkuController(ctx context.Context, listener net.Listener) socket.SkuController {
	config := getConfig()
	messageMongoRepository := initializeMongoDbRepository(ctx, config)
	createMessageCommandHandler := initializeCreateMessageCommandHandler(messageMongoRepository)
	generateReportQueryHandler := initializeGenerateReportQueryHandler(messageMongoRepository)
	skuController := socket.NewSkuController(createMessageCommandHandler, generateReportQueryHandler, listener, ctx)
	return skuController
}

// wire.go:

type Config struct {
	Host           string
	Port           string
	UserName       string
	Password       string
	CollectionName string
	Database       string
}

func createMongoDbClient(ctx context.Context, cfg Config) *mongo.Client {
	credentials := options.Credential{Username: cfg.UserName, Password: cfg.Password}

	client, err := mongo.NewClient(options.Client().ApplyURI(fmt.Sprintf("mongodb://%s:%s", cfg.Host, cfg.Port)).SetAuth(credentials))
	if err != nil {
		log.Fatal(err)
	}
	err = client.Connect(ctx)
	if err != nil {
		log.Fatal(err)
	}

	return client
}

func initializeMongoDbCollection(mongoClient *mongo.Client, cfg Config) *mongo.Collection {
	return mongoClient.Database(cfg.Database).Collection(cfg.CollectionName)
}

func getConfig() Config {
	return Config{
		Host:           MongoHost,
		Port:           MongoPort,
		UserName:       Username,
		Password:       Password,
		CollectionName: CollectionName,
		Database:       Database,
	}
}
